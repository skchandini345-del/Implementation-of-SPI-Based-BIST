module CUT (
    input [3:0] A, B,
    input [1:0] op,
    output reg [4:0] Y
);
    wire [3:0] sum;
    wire carry_out;

    assign sum = A ^ B;
    assign carry_out = |(A & B);

    always @(*) begin
        case (op)
            2'b00: Y = {carry_out, sum};  // ADD
            2'b01: Y = {1'b0, A - B};     // SUB
            2'b10: Y = {1'b0, A & B};     // AND
            2'b11: Y = {1'b0, A ^ B};     // XOR
            default: Y = 5'b00000;
        endcase
    end
endmodule
